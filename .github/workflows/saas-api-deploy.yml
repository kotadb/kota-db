name: SaaS API Deploy to Fly.io

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile.production'
      - 'fly.toml'
      - 'fly.staging.toml'
      - '.github/workflows/saas-api-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback:
        description: 'Perform rollback instead of deploy'
        required: false
        default: 'false'

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  # Build and test before deployment
  test:
    name: Test SaaS API
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run tests
        run: |
          cargo test --features tree-sitter-parsing,git-integration --bin kotadb-api-server
      
      - name: Run clippy
        run: |
          cargo clippy --features tree-sitter-parsing,git-integration --bin kotadb-api-server -- -D warnings

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' ||
      github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://kotadb-api-staging.fly.dev
    steps:
      - uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 2.40.7

      - name: Apply Supabase migrations (staging)
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL_STAGING }}
        run: |
          if [ -z "$SUPABASE_DB_URL" ]; then
            echo "SUPABASE_DB_URL_STAGING not set, skipping"
          else
            ./scripts/supabase-apply-remote.sh
          fi

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Staging
        run: |
          flyctl deploy \
            --config fly.staging.toml \
            --ha=false \
            --strategy immediate \
            --wait-timeout 300
      
      - name: Run SaaS smoke tests
        env:
          KOTADB_SAAS_API_KEY: ${{ secrets.SAAS_STAGING_API_KEY }}
        run: |
          chmod +x scripts/saas_smoke.sh
          scripts/saas_smoke.sh -u https://kotadb-api-staging.fly.dev --mcp

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production' ||
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://kotadb-api.fly.dev
    steps:
      - uses: actions/checkout@v4

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 2.40.7

      - name: Apply Supabase migrations (production)
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL_PRODUCTION }}
        run: |
          if [ -z "$SUPABASE_DB_URL" ]; then
            echo "SUPABASE_DB_URL_PRODUCTION not set, skipping"
          else
            ./scripts/supabase-apply-remote.sh
          fi

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Production
        run: |
          flyctl deploy \
            --config fly.toml \
            --ha=true \
            --strategy rolling \
            --wait-timeout 600
      
      - name: Run SaaS smoke tests
        env:
          KOTADB_SAAS_API_KEY: ${{ secrets.SAAS_PRODUCTION_API_KEY }}
        run: |
          chmod +x scripts/saas_smoke.sh
          scripts/saas_smoke.sh -u https://kotadb-api.fly.dev --mcp
      
      - name: Notify Success
        if: success()
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: 510,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Production deployment to Fly.io successful! Version deployed from commit: ${{ github.sha }}'
            })
      
      - name: Notify Failure
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: 510,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Production deployment to Fly.io failed! Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })

  # Rollback job (manual trigger only)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback == 'true'
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Rollback Deployment
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            CONFIG="fly.toml"
            APP="kotadb-api"
          else
            CONFIG="fly.staging.toml"
            APP="kotadb-api-staging"
          fi
          
          # Get previous release and rollback
          RELEASE_ID=$(flyctl releases list --app $APP --json | jq -r '.[1].id')
          flyctl apps rollback $RELEASE_ID --app $APP
          
          echo "Rollback completed for ${{ github.event.inputs.environment }}"
